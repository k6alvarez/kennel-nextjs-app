// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum Permission {
  ADMIN
  USER
  EMPLOYEE
}

enum ContentPages {
  HOME
  BOARDING
  TRAINING
  POLICIES
  RATES
  CONTACT
  RESERVATIONS
}

// Required Authentication Models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("sessions")
}

model User {
  id                    String             @id @default(cuid())
  name                  String?
  lastName              String?
  email                 String?            @unique
  emailVerified         DateTime?          @map("email_verified")
  image                 String?
  address               String?
  unit                  String?
  city                  String?
  state                 String?
  zip                   String?
  phone                 String?
  altPhone              String?
  emergencyContactName  String?
  emergencyContactPhone String?
  createdAt             DateTime           @default(now()) @map(name: "created_at")
  updatedAt             DateTime           @updatedAt @map(name: "updated_at")
  posts                 Post[]
  pets                  Pet[]
  accounts              Account[]
  sessions              Session[]
  permissions           Permission[]       @default(value: [USER])
  reservation           Reservation[]
  guestReservation      GuestReservation[]
  ContentItem           ContentItem[]
  PromoItem             PromoItem[]
  Policy                Policy[]
  Question              Question[]
  PetRun                PetRun[]
  Service               Service[]
  MedicalIssue          MedicalIssue[]
  AppSetting            AppSetting[]
  Questionnaire         Questionnaire[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// End Required Authentication Models

// Optional Default App Models
model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model BusinessHours {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  name       String   @unique
  isClosed   Boolean  @default(false)
  timeOpen   String?
  timeClose  String?
  breakClose String?
  breakOpen  String?

  @@map(name: "business_hours")
}

model ContentItem {
  id        String       @id @default(cuid())
  name      String       @unique
  page      ContentPages @default(value: HOME)
  content   String
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map(name: "content_items")
}

model PromoItem {
  id          String       @id @default(cuid())
  author      User?        @relation(fields: [authorId], references: [id])
  page        ContentPages @default(value: HOME)
  name        String       @unique
  promoGroup  String?
  authorId    String?
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  image       String?
  size        String?
  title       String?
  description String?
  link        String?

  @@map(name: "promo_items")
}

model Policy {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "policies")
}

model Service {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  name        String   @unique
  description String
  price       String
  duration    String
  dailyLimit  String
  available   Boolean  @default(true)
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?

  @@map(name: "services")
}

model AppSetting {
  id        String   @id @default(cuid())
  name      String   @unique
  title     String?
  subtitle  String?
  logo      String?
  favicon   String?
  facebook  String?
  instagram String?
  twitter   String?
  youtube   String?
  google    String?
  yelp      String?
  updatedAt DateTime @updatedAt @map("updated_at")
  authorId  String?
  slogan    String?
  author    User?    @relation(fields: [authorId], references: [id])

  @@map("app_settings")
}

// Kennel App Models
model Pet {
  id                     String        @id @default(cuid())
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  type                   String
  name                   String
  breed                  String
  gender                 String
  fixed                  String
  color                  String
  image                  String?
  largeImage             String?
  vaccinations           String
  vaccinationsLargeImage String?
  distemperVaccine       String?
  bordetellaVaccine      String?
  rabiesVaccine          String?
  parvoVirusesVaccine    String?
  felinLeukemiaVaccine   String?
  felineFvrcpVaccine     String?
  age                    String
  weight                 String
  vet                    String
  preferredRunSize       String
  feeding                String
  feedingCount           String
  feedingTimesPerDay     String        @default(value: "1")
  medications            String?
  medicationInstructions String?
  owner                  User          @relation(fields: [ownerId], references: [id])
  ownerId                String
  reservations           Reservation[]

  @@map("pets")
}

model GuestPet {
  id                     String             @id @default(cuid())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  type                   String
  name                   String
  breed                  String
  gender                 String
  fixed                  String
  color                  String
  image                  String?
  largeImage             String?
  vaccinations           String
  vaccinationsLargeImage String?
  distemperVaccine       String?
  bordetellaVaccine      String?
  rabiesVaccine          String?
  parvoVirusesVaccine    String?
  felinLeukemiaVaccine   String?
  felineFvrcpVaccine     String?
  age                    String
  weight                 String
  vet                    String
  preferredRunSize       String
  feeding                String
  feedingCount           String
  feedingTimesPerDay     String             @default(value: "1")
  medications            String?
  medicationInstructions String?
  reservations           GuestReservation[]

  @@map("guest_pets")
}

model MedicalIssue {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  name        String   @unique
  description String
  price       String
  duration    String
  dailyLimit  String
  available   Boolean  @default(true)
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?

  @@map(name: "medical_issues")
}

model Reservation {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now()) @map(name: "created_at")
  updatedAt           DateTime @updatedAt @map(name: "updated_at")
  submitted           Boolean  @default(false)
  confirmed           Boolean  @default(false)
  cancelled           Boolean  @default(false)
  author              User     @relation(fields: [authorId], references: [id])
  authorId            String
  arrivalDate         String
  arrivalTime         String
  departureDate       String
  departureTime       String
  dateConfirmed       String?
  specialInstructions String?
  pets                Pet[]
  depositStatus       String?
  depositAmount       String?
  depositDate         String?
  depositId           String?
  depositLink         String?

  @@map(name: "reservations")
}

model Questionnaire {
  id                          String   @id @default(cuid())
  createdAt                   DateTime @default(now()) @map(name: "created_at")
  updatedAt                   DateTime @updatedAt @map(name: "updated_at")
  author                      User?    @relation(fields: [authorId], references: [id])
  depositStatus               String?
  depositAmount               String?
  depositDate                 String?
  depositId                   String?
  depositLink                 String?
  authorId                    String?
  email                       String
  name                        String
  lastName                    String
  address                     String
  unit                        String
  city                        String
  state                       String
  zip                         String
  phone                       String
  adultsInHome                String
  childrenInHome              String
  childrenAges                String
  referredBy                  String
  petName                     String
  petBreed                    String   @default(value: "")
  petAgeWhenAcquired          String
  petAgeNow                   String
  whereDidYouGetYourDog       String
  whereDidYouGetYourDogOther  String
  metAndInteractedWithParents String
  reasonForNotMeetingParents  String
  wereParentsFriendly         String
  hipsCertified               String
  dogHousebroken              String
  dogPaperTrained             String
  dogExcitementPiddle         String
  dogFoodAndStools            String
  dogCrateTrained             String
  dogCrateType                String
  crateLocation               String
  cratePreference             String
  crateUsage                  String
  eliminationInCrate          String
  eliminationRoutine          String
  dogExercise                 String
  healthProblems              String
  healthProblemsExplanation   String
  watchdogBehavior            String
  objectDestruction           String
  jumpingBehavior             String
  jumpingCommand              String
  jumpingResponse             String
  jumpingDesire               String
  mouthBehavior               String
  aggressiveBehavior          String
  aggressiveExplanation       String
  furnitureRules              String
  furnitureUsage              String
  diggingHabits               String
  doorDashBehavior            String
  objectStealing              String
  stolenObjectTypes           String
  hasCat                      String
  catLitterBoxAccess          String
  catAggression               String
  otherDogPresence            String
  dogRelationships            String
  objectRemoval               String
  tugOfWar                    String
  tugWith                     String
  wrestling                   String
  chaseGames                  String
  playStyle                   String
  sleepLocation               String
  restingPlaceGrowling        String
  blockingBehavior            String
  fearOfNoises                String
  reactToStrangersEnter       String
  reactToStrangersOutOfHome   String
  reactToChildren             String
  parksAndWoodedAreas         String
  ownedDogBefore              String
  trainedDogBefore            String
  interestInTraining          String
  trainingGoals               String
  previousTraining            String
  previousTrainingLocation    String
  leashResponse               String
  leashBehaviors              String
  recallCommand               String
  recallPercentage            String
  comeInsideOutside           String
  correctedBehavior           String
  correctedBehaviorDetails    String
  physicalPunishment          String
  carRideBehavior             String
  obedienceWords              String
  tricksTaught                String
  demandingAttention          String
  reasonForOwning             String
  additionalInfo              String

  @@map(name: "questionnaires")
}

model GuestReservation {
  id                    String     @id @default(cuid())
  createdAt             DateTime   @default(now()) @map(name: "created_at")
  updatedAt             DateTime   @updatedAt @map(name: "updated_at")
  submitted             Boolean    @default(false)
  confirmed             Boolean    @default(false)
  cancelled             Boolean    @default(false)
  author                User?      @relation(fields: [authorId], references: [id])
  authorId              String?
  name                  String
  lastName              String
  email                 String
  address               String
  unit                  String
  city                  String
  state                 String
  zip                   String
  phone                 String
  altPhone              String?
  emergencyContactName  String
  emergencyContactPhone String
  arrivalDate           String
  arrivalTime           String
  departureDate         String
  departureTime         String
  dateConfirmed         String?
  specialInstructions   String?
  howHear               String?
  depositStatus         String?
  depositAmount         String?
  depositDate           String?
  depositId             String?
  depositLink           String?
  pets                  GuestPet[]

  @@map(name: "guest_reservations")
}

model HolidayPremiumDates {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  type       String
  name       String   @unique
  isClosed   Boolean  @default(false)
  dateFrom   String
  dateTo     String?
  timeOpen   String?
  timeClose  String?
  breakClose String?
  breakOpen  String?

  @@map(name: "holiday_premium_dates")
}

model Question {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "questions")
}

model PetRun {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @updatedAt @map(name: "updated_at")
  name               String   @unique
  petType            String   @default(value: "dog")
  sizeInside         String
  sizeOutside        String
  dailyRate          String
  roommateDailyRate  String
  holidayPremiumRate String
  order              String   @default(value: "0")
  wing               String   @default(value: "A")
  gallery            String[] @default(value: [])
  author             User?    @relation(fields: [authorId], references: [id])
  authorId           String?

  @@map(name: "pet_runs")
}

// End Kennel App Models

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  ADMIN
  USER
  EMPLOYEE
}

model Pet {
  id                     String        @id @default(cuid())
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  type                   String
  name                   String
  breed                  String
  gender                 String
  fixed                  String
  color                  String
  image                  String?
  largeImage             String?
  vaccinations           String
  vaccinationsLargeImage String?
  distemperVaccine       String?
  bordetellaVaccine      String?
  rabiesVaccine          String?
  parvoVirusesVaccine    String?
  age                    String
  weight                 String
  vet                    String
  preferredRunSize       String
  feeding                String
  feedingCount           String
  owner                  User          @relation(fields: [ownerId], references: [id])
  ownerId                String
  reservations           Reservation[]

  @@map("pets")
}

model GuestPet {
  id                     String             @id @default(cuid())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  type                   String
  name                   String
  breed                  String
  gender                 String
  fixed                  String
  color                  String
  image                  String?
  largeImage             String?
  vaccinations           String
  vaccinationsLargeImage String?
  distemperVaccine       String?
  bordetellaVaccine      String?
  rabiesVaccine          String?
  parvoVirusesVaccine    String?
  age                    String
  weight                 String
  vet                    String
  preferredRunSize       String
  feeding                String
  feedingCount           String
  reservations           GuestReservation[]

  @@map("guest_pets")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String             @id @default(cuid())
  name                  String?
  lastName              String?
  email                 String?            @unique
  emailVerified         DateTime?          @map("email_verified")
  image                 String?
  address               String?
  phone                 String?
  altPhone              String?
  emergencyContactName  String?
  emergencyContactPhone String?
  createdAt             DateTime           @default(now()) @map(name: "created_at")
  updatedAt             DateTime           @updatedAt @map(name: "updated_at")
  posts                 Post[]
  pets                  Pet[]
  accounts              Account[]
  sessions              Session[]
  permissions           Permission[]       @default(value: [USER])
  reservation           Reservation[]
  guestReservation      GuestReservation[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Reservation {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now()) @map(name: "created_at")
  updatedAt           DateTime @updatedAt @map(name: "updated_at")
  submitted           Boolean  @default(false)
  confirmed           Boolean  @default(false)
  author              User     @relation(fields: [authorId], references: [id])
  authorId            String
  arrivalDate         String
  arrivalTime         String
  departureDate       String
  departureTime       String
  dateConfirmed       String?
  specialInstructions String?
  pets                Pet[]

  @@map(name: "reservations")
}

model GuestReservation {
  id                    String     @id @default(cuid())
  createdAt             DateTime   @default(now()) @map(name: "created_at")
  updatedAt             DateTime   @updatedAt @map(name: "updated_at")
  submitted             Boolean    @default(false)
  confirmed             Boolean    @default(false)
  author                User?      @relation(fields: [authorId], references: [id])
  authorId              String?
  name                  String
  lastName              String
  email                 String
  address               String
  phone                 String
  altPhone              String?
  emergencyContactName  String
  emergencyContactPhone String
  arrivalDate           String
  arrivalTime           String
  departureDate         String
  departureTime         String
  dateConfirmed         String?
  specialInstructions   String?
  howHear               String?
  depositStatus         String?
  depositAmount         String?
  depositDate           String?
  depositId             String?
  depositLink           String?
  pets                  GuestPet[]

  @@map(name: "guest_reservations")
}

model HolidayPremiumDates {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  type       String
  name       String   @unique
  isClosed   Boolean  @default(false)
  dateFrom   String
  dateTo     String?
  timeOpen   String?
  timeClose  String?
  breakClose String?
  breakOpen  String?

  @@map(name: "holiday_premium_dates")
}

model BusinessHours {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  name       String   @unique
  isClosed   Boolean  @default(false)
  timeOpen   String?
  timeClose  String?
  breakClose String?
  breakOpen  String?

  @@map(name: "business_hours")
}
